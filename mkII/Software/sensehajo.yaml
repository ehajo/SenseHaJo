esphome:
  name: sensehajo
  friendly_name: SenseHaJo
  project:
    name: "eHaJo.SenseHaJo"
    version: "0.1.0"
  on_boot:
    then:
      - delay: 100ms  # Kurze Verzögerung, um sicherzustellen, dass der Reset vom Display intern korrekt ausgeführt wird
      - script.execute: script_all_off  # Alles ausschalten nach Initialisierung

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

# I2C-Konfiguration für das OLED-Display
i2c:
  sda: GPIO32  # Datenleitung (externe Pull-Ups erforderlich)
  scl: GPIO14  # Taktleitung (externe Pull-Ups erforderlich)
  scan: true   # Scannt beim Start nach I²C-Geräten

# OLED-Display
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: oled_display
    update_interval: 1s
    lambda: |-
      it.printf(0, 0, id(font_large), "SenseHaJo");
      it.printf(0, 16, id(font_small), "Temp: %.1f°C", id(sensor_boilertemp).state);
      it.printf(0, 32, id(font_small), "Status: %d", id(_sensehajo_state));
      switch(id(_sensehajo_state)) {
        case 0: it.print(0, 48, id(font_small), "AUS"); break;
        case 10: it.print(0, 48, id(font_small), "STBY"); break;
        case 15: it.print(0, 48, id(font_small), "READY"); break;
        case 20: it.print(0, 48, id(font_small), "Kochen"); break;
        case 40: it.print(0, 48, id(font_small), "Spülen"); break;
        case 100: it.print(0, 48, id(font_small), "Error"); break;
      }

# Schriftarten für das Display
font:
  - file: "Arial.ttf"  # Lade eine TTF-Datei hoch oder nutze eine eingebaute Schriftart
    id: font_large
    size: 16
  - file: "Arial.ttf"
    id: font_small
    size: 12

# Enable Home Assistant API
api:
  encryption:
    key: !secret api-key

ota:
  - platform: esphome
    password: !secret ota-pw

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Sensehajo Fallback Hotspot"
    password: !secret fallback-pw

captive_portal:

# Globale Variablen
globals:
  - id: _sensehajo_state
    type: int
    restore_value: no
    initial_value: '0'
    #  0 ... AUS
    # 10 ... STBY
    # 15 ... READY
    # 20 ... Kaffee kochen
    # 25 ... Aufheizen - Kaffee - Aus
    # 40 ... Spülen
    # 100 ... error

# LED Lichter der SenseHaJo
light:
  - platform: neopixelbus
    id: "sensehajo_ws2812"
    type: GRB
    variant: WS2812
    pin: GPIO18
    num_leds: 3
  - platform: partition
    id: "sensehajo_LED1"  # LED 2 Tassen
    default_transition_length: 0s
    segments:
      - id: sensehajo_ws2812
        from: 0
        to: 0
    effects:
      - random:
          name: "Kaffeekochen"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Kaffeewarten"
          transition_length: 0.3s
          update_interval: 0.3s
          min_brightness: 20%
          max_brightness: 50%
  - platform: partition
    id: "sensehajo_LED2"  # LED Einschalter
    default_transition_length: 0s
    segments:
      - id: sensehajo_ws2812
        from: 1
        to: 1
    effects:
      - random:
          name: "Spuelen"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.3s
          update_interval: 0.3s
          min_brightness: 20%
          max_brightness: 50%
  - platform: partition
    id: "sensehajo_LED3"  # LED 1 Tasse
    default_transition_length: 0s
    segments:
      - id: sensehajo_ws2812
        from: 2
        to: 2
    effects:
      - random:
          name: "Kaffeekochen"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Kaffeewarten"
          transition_length: 0.3s
          update_interval: 0.3s
          min_brightness: 20%
          max_brightness: 50%

# Einstellbar via Home Assistant
number:
  - platform: template
    id: sensehajo_bruehzeit
    name: "Brühzeit"
    icon: mdi:timer-cog-outline
    min_value: 1
    max_value: 30
    step: 1
    restore_value: true
    optimistic: true
    unit_of_measurement: "s"
  - platform: template
    id: sensehajo_kaffeetemp
    name: "Brühtemperatur"
    icon: mdi:water-thermometer
    min_value: 50
    max_value: 90
    restore_value: true
    step: 1
    optimistic: true
    unit_of_measurement: "°C"

# Buttons um von HA aus zu steuern
button:
  - platform: template
    name: "SenseHaJo einschalten"
    id: button_turnON
    icon: "mdi:power"
    on_press:
      - script.execute: script_power_on
  - platform: template
    name: "1 Tasse Kaffee"
    id: button_1coffee
    icon: "mdi:coffee"
    on_press:
      - script.execute:
          id: script_prepare_coffee
          cups: 1
  - platform: template
    name: "2 Tassen Kaffee"
    id: button_2coffee
    icon: "mdi:coffee"
    on_press:
      - script.execute:
          id: script_prepare_coffee
          cups: 2

# Eingänge
binary_sensor:
  - platform: gpio
    id: "sensehajo_Taste1"  # Taste 2 Tassen Kaffee
    pin:
      number: GPIO23
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - script.execute:
              id: script_prepare_coffee
              cups: 2
  - platform: gpio
    id: "sensehajo_Taste2"  # Taste Ein/Ausschalten
    pin:
      number: GPIO26
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - script.execute: script_power_on
      - min_length: 2s
        max_length: 10s
        then:
          - script.execute: script_spuelen
  - platform: gpio
    id: "sensehajo_Taste3"  # Taste 1 Tasse Kaffee
    pin:
      number: GPIO27
      inverted: true
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_click:
      - min_length: 50ms
        max_length: 350ms
        then:
          - script.execute:
              id: script_prepare_coffee
              cups: 1
  - platform: gpio
    id: "sensehajo_Hallsensor"  # Input Hallsensor
    pin:
      number: GPIO21
  - platform: gpio
    id: "sensehajo_Reed2"  # Reed-Kontakt Wasserstand 2 Tassen
    name: "Reed 2"
    pin:
      number: GPIO34
      inverted: true
    on_press:
      - lambda: |-
          if (id(_sensehajo_state) == 100) {
            id(_sensehajo_state) = 10;
            auto call = id(heizungsregler).make_call();
            call.set_preset("Activity");
            call.set_target_temperature(id(sensehajo_kaffeetemp).state);
            call.perform();
            auto call2 = id(sensehajo_LED2).turn_on();
            call2.set_brightness(0.5);
            call2.set_rgb(0,0,1);
            call2.set_effect("None");
            call2.perform();
          }
    on_release:
      - lambda: |-
          if(id(_sensehajo_state) == 20) {
            id(script_coffeetime).stop();
            auto call = id(sensehajo_LED2).turn_on();
            call.set_brightness(0.5);
            call.set_rgb(0,1,0);
            call.set_effect("Fast Pulse");
            call.perform();
            id(gpio_pumpe).turn_off();
            id(sensehajo_LED3).turn_off().perform();
            id(sensehajo_LED1).turn_off().perform();
          } else if(id(_sensehajo_state) == 40) {
            id(script_spuelen).stop();
            id(script_all_off).execute();
          } else if(id(_sensehajo_state) != 0) {
            id(_sensehajo_state) = 100;
            id(script_error).execute();
          }

# Ausgänge
switch:
  - platform: gpio
    pin: 5
    id: gpio_pumpe
    icon: mdi:water-pump
    restore_mode: ALWAYS_OFF
  - platform: gpio
    id: gpio_heizung
    pin: 19
    icon: mdi:thermometer-water
    restore_mode: ALWAYS_OFF

# Erfassung des Widerstandswertes via ADC1-CH0
sensor:
  - platform: template
    id: template_boilertemp
    name: "Boilertemperatur"
    icon: mdi:water-thermometer
    update_interval: 1s
    lambda: |-
        return id(sensor_boilertemp).state;
  - platform: template
    id: template_state
    name: "SenseHaJo State"
    icon: "mdi:state-machine"
    lambda: |-
        return id(_sensehajo_state);
    update_interval: 1s
  - platform: ntc
    id: sensor_boilertemp
    icon: mdi:water-thermometer
    sensor: tempsense_resistance
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
  - platform: resistance
    id: tempsense_resistance
    sensor: tempsense_source
    configuration: DOWNSTREAM
    resistor: 3.3kOhm
  - platform: adc
    id: tempsense_source
    attenuation: 11dB
    update_interval: 0.1s
    pin: GPIO36
    raw: true
    filters:
      - multiply: 0.00095238  # 3.9/4095, for attenuation 11db

climate:
  - platform: thermostat
    id: heizungsregler
    sensor: sensor_boilertemp
    visual:
      min_temperature: 0
      max_temperature: 90
      temperature_step: 1
    min_heating_off_time: 1s
    min_heating_run_time: 1s
    min_idle_time: 1s
    icon: mdi:coffee-maker
    heat_action:
      - switch.turn_on: gpio_heizung
      - light.turn_on:
          id: sensehajo_LED2
          brightness: 50%
          red: 0%
          green: 0%
          blue: 100%
    idle_action:
      - switch.turn_off: gpio_heizung
      - light.turn_on:
          id: sensehajo_LED2
          brightness: 50%
          red: 100%
          green: 0%
          blue: 0%
      - lambda: |-
          if (id(_sensehajo_state) == 10) {
              id(_sensehajo_state) = 15;
          }
    default_preset: sleep
    on_boot_restore_from: default_preset
    preset:
      - name: activity
        default_target_temperature_low: 50 °C
        mode: heat
      - name: sleep
        default_target_temperature_low: 10 °C
        mode: "OFF"

script:
  # Fehlerbehandlung
  - id: script_error
    then:
      - lambda: |-
          id(_sensehajo_state) = 100;
      - light.turn_on:
          id: sensehajo_ws2812
          brightness: 50%
          red: 100%
          green: 0%
          blue: 0%
          effect: "Fast Pulse"
      - delay: 10s
      - script.execute: script_all_off

  # Einschalten (nur Reed2 verwendet)
  - id: script_power_on
    then:
      - lambda: |-
          if (id(sensehajo_Reed2).state) {
            id(script_timout).execute();
            auto call = id(sensehajo_LED2).turn_on();
            call.set_brightness(0.5);
            call.set_rgb(1,0,0);
            call.set_effect("None");
            call.perform();
            if (id(_sensehajo_state) == 0) {
                id(_sensehajo_state) = 10;
                auto call = id(heizungsregler).make_call();
                call.set_preset("Activity");
                call.set_target_temperature(id(sensehajo_kaffeetemp).state);
                call.perform();
            } else {
                id(_sensehajo_state) = 0;
                id(script_all_off).execute();
            }
          } else {
            auto call2 = id(sensehajo_LED2).turn_on();
            call2.set_brightness(0.5);
            call2.set_rgb(0.5,0.5,1);
            call2.set_effect("Fast Pulse");
            call2.perform();
            if (id(_sensehajo_state) == 0) {
                id(_sensehajo_state) = 100;
                id(script_error).execute();
            } else {
                id(_sensehajo_state) = 0;
                id(script_all_off).execute();
            }
          }

  # Alles ausschalten
  - id: script_all_off
    then:
      - lambda: |-
          id(script_spuelen).stop();
          id(script_coffeetime).stop();
          id(script_power_on).stop();
          auto call = id(heizungsregler).make_call();
          call.set_preset("SLEEP");
          call.perform();
          id(_sensehajo_state) = 0;
      - switch.turn_off: gpio_heizung
      - switch.turn_off: gpio_pumpe
      - delay: 500ms
      - light.turn_off: sensehajo_LED1
      - light.turn_off: sensehajo_LED2
      - light.turn_off: sensehajo_LED3

  # Kaffeezubereitung konsolidiert
  - id: script_prepare_coffee
    parameters:
      cups: int
    then:
      - if:
          condition:
            lambda: |-
                return id(_sensehajo_state) == 0;
          then:
            - script.execute: script_power_on
            - lambda: |-
                auto call = (cups == 1) ? id(sensehajo_LED3).turn_on() : id(sensehajo_LED1).turn_on();
                call.set_brightness(0.5);
                call.set_rgb(0,0,1);
                call.set_effect("Kaffeewarten");
                call.perform();
            - wait_until:
                condition:
                  lambda: |-
                      return id(_sensehajo_state) == 15;
                timeout: 1min
      - script.execute:
          id: script_coffeetime
          cups: !lambda |-
              return cups;

  # Kaffee kochen
  - id: script_coffeetime
    parameters:
      cups: int
    then:
      - script.execute: script_timout
      - lambda: |-
          if((id(_sensehajo_state) != 15) || !id(sensehajo_Reed2).state) {
            id(script_coffeetime).stop();
            id(script_error).execute();
          }
      - lambda: |-
          id(_sensehajo_state) = 20;
          if(cups == 1) {
            auto call = id(sensehajo_LED3).turn_on();
            call.set_brightness(0.5);
            call.set_rgb(0,1,0);
            call.set_effect("Kaffeekochen");
            call.perform();
          } else {
            auto call = id(sensehajo_LED1).turn_on();
            call.set_brightness(0.5);
            call.set_rgb(0,1,0);
            call.set_effect("Kaffeekochen");
            call.perform();
          }
      - switch.turn_on: gpio_pumpe
      - delay: !lambda |-
          return cups * id(sensehajo_bruehzeit).state * 1000;
      - switch.turn_off: gpio_pumpe
      - light.turn_off: sensehajo_LED1
      - light.turn_off: sensehajo_LED3
      - lambda: |-
          id(_sensehajo_state) = 15;
      - script.execute: script_timout

  # Maschine spülen
  - id: script_spuelen
    then:
      - lambda: |-
          if ((id(_sensehajo_state) == 0 || id(_sensehajo_state) == 15) && id(sensehajo_Reed2).state) {
            auto call = id(sensehajo_LED2).turn_on();
            call.set_brightness(0.5);
            call.set_rgb(0.5,0.5,1);
            call.set_effect("Spuelen");
            call.perform();
            id(gpio_pumpe).turn_on();
            id(_sensehajo_state) = 40;
          } else {
            id(script_spuelen).stop();
            id(script_error).execute();
          }
      - delay: 60s
      - lambda: |-
          id(_sensehajo_state) = 0;
      - script.execute: script_all_off

  # Auto-Power-Off
  - id: script_timout
    mode: restart
    then:
      - delay: 5min
      - script.execute: script_all_off

# Reservierte Pins (Dokumentation)
# GPIO0, GPIO2 (Boot), GPIO1, GPIO3 (UART) nicht verwenden!